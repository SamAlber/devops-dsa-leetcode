Very important question that highlights the â€œlimping pointer strategy" or "lagging update" â€” thatâ€™s where we try to balance the seesaw on one side and see if itâ€™s aligned (and then we can return the pivot). If it's not balanced, we add more weight to the left and check again to see if the sum of the weights is similar.

Itâ€™s important to notice that we used - right_sum = total_sum - left_sum - num

Because of this logic: Total = left + pivot + right â‡’ right = total - left - pivot âœ…

If you do +num instead of -num, you're incorrectly adding the pivot to the right side â€” but the pivot doesnâ€™t belong to either side.

IT REALLY ACTS LIKE A SEESAW!
 We add to the left side (it goes up), we compute the new right side (it goes down), and then we check with the if statement in the middle each time.
IF WE COULDNâ€™T BALANCE, WE RETURN -1

---

ðŸ•’ Time Complexity: O(n)
We iterate over the array once to compute total_sum â†’ O(n)

Then we loop again once to find the pivot â†’ O(n)

âœ… Total: O(n)

ðŸ’¾ Space Complexity: O(1)
We use just a few variables: total_sum, left_sum, and num

No additional data structures are used

âœ… Space: O(1)
